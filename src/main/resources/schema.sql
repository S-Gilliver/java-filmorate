DROP TABLE IF EXISTS users, films, mpa, genre, film_genre, film_likes, friends CASCADE;

CREATE TABLE IF NOT EXISTS USERS
(
    ID int GENERATED by DEFAULT as IDENTITY PRIMARY KEY,
    EMAIL    CHARACTER VARYING(50) not null,
    NAME     CHARACTER VARYING(20),
    LOGIN    CHARACTER VARYING(20) not null,
    BIRTHDAY DATE
);

CREATE TABLE IF NOT EXISTS MPA (
    ID int NOT NULL PRIMARY KEY,
    NAME varchar(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS (
    ID int GENERATED by DEFAULT as IDENTITY PRIMARY KEY,
    DESCRIPTION varchar(200),
    NAME varchar(150) NOT NULL,
    RELEASE_DATE date ,
    DURATION int ,
    MPA_ID int NOT NULL REFERENCES MPA(ID)
);

CREATE TABLE IF NOT EXISTS GENRE (
    ID int NOT NULL PRIMARY KEY,
    NAME varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILM_GENRE (
    FILM_ID int NOT NULL REFERENCES FILMS(ID) on update cascade ON DELETE CASCADE,
    GENRE_ID int NOT NULL REFERENCES GENRE(ID) on update cascade ON DELETE CASCADE,
    PRIMARY KEY (FILM_ID, GENRE_ID)
);

CREATE TABLE IF NOT EXISTS FILM_LIKES (
    FILM_ID int NOT NULL REFERENCES FILMS(ID)  on update cascade ON DELETE CASCADE,
    USER_ID int NOT NULL REFERENCES USERS(ID)  on update cascade ON DELETE CASCADE,
    PRIMARY KEY (FILM_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id int NOT NULL,
    friend_id int NOT NULL,
    CONSTRAINT fk_user_friends
        FOREIGN KEY (user_id)
            REFERENCES users(id) on update cascade on delete cascade,
    CONSTRAINT fk_friend_friends
        FOREIGN KEY (friend_id)
            REFERENCES users(id) on update cascade on delete cascade
);