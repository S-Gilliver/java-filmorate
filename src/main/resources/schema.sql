DROP TABLE IF EXISTS users, films, mpa, genre, film_genre, film_likes, friends CASCADE;

CREATE TABLE IF NOT EXISTS users
(
    id int GENERATED by DEFAULT as IDENTITY PRIMARY KEY,
    email    CHARACTER VARYING(50) not null,
    name     CHARACTER VARYING(20),
    login    CHARACTER VARYING(20) not null,
    birthday DATE
);

CREATE TABLE IF NOT EXISTS mpa (
    id int NOT NULL PRIMARY KEY,
    name varchar(20) NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
    id int GENERATED by DEFAULT as IDENTITY PRIMARY KEY,
    description varchar(200),
    name varchar(150) NOT NULL,
    release_date date ,
    duration int ,
    mpa_id int NOT NULL REFERENCES mpa(id)
);

CREATE TABLE IF NOT EXISTS genre (
    id int NOT NULL PRIMARY KEY,
    name varchar(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id int NOT NULL REFERENCES films(id) on update cascade ON DELETE CASCADE,
    genre_id int NOT NULL REFERENCES genre(id) on update cascade ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS film_likes (
    film_id int NOT NULL REFERENCES FILMS(ID)  on update cascade ON DELETE CASCADE,
    user_id int NOT NULL REFERENCES USERS(ID)  on update cascade ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id),
    CONSTRAINT uc_film_likes UNIQUE (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friends (
    user_id int NOT NULL,
    friend_id int NOT NULL,
    CONSTRAINT fk_user_friends
        FOREIGN KEY (user_id)
            REFERENCES users(id) on update cascade on delete cascade,
    CONSTRAINT fk_friend_friends
        FOREIGN KEY (friend_id)
            REFERENCES users(id) on update cascade on delete cascade
);

SELECT
    f.id,
    f.description,
    f.name,
    f.release_date,
    f.duration,
    f.mpa_id,
    m.name AS mpa_name
FROM
    films f
        JOIN
    mpa m ON f.mpa_id = m.id;
